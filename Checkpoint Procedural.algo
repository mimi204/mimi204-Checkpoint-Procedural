PROCEDURE dot_product(v1,v2 : ARRAY_OF INTEGER,VAR ps:INTEGER)
VAR
    i,n,m:INTEGER;
BEGIN
    ps:=0;
    n:= v1.length-1;
    m:= v2.length-1;
    IF (n <> m) THEN
        Write("We can't caluclate the product of 2 vectors have different length")
        RETURN ps := NAN;
    END_IF
    FOR i FROM 0 TO n STEP 1  DO
        ps:=ps+v1[i]*v2[i]
    END_FOR
END

// vectors := [v1,v2,v3,v4]

ALGORITHM orth_vector
VAR
    vectors : ARRAY_OF ARRAY;
    ps,i,j,n:INTEGER;
BEGIN
    n:=vectors.length-1;
    FOR i FROM 0 TO n-1 STEP 1  DO
        FOR j FROM i+1 TO n STEP 1  DO
            dot_product(vectors[i],vectors[j],ps)
            IF (ps = 0) THEN
                Write(vectors[i],"and",vectors[j],"are orthogonal")
            END_IF
        END_FOR
    END_FOR
END

FUNCTION dot_product(v1,v2 : ARRAY_OF INTEGER) : INTEGER
VAR
    i,n,ps,m:INTEGER;
BEGIN
    n:=v1.length-1;
    m:=v2.length-1;
    ps:=0;
    IF (n <> m) THEN
        (n <> m) THEN
        Write("We can't caluclate the product of 2 vectors have different length")
        RETURN ps := NAN;
    END_IF
    FOR i FROM 0 TO n STEP 1  DO
        ps:=ps+v1[i]*v2[i]
    END_FOR
    RETURN ps ;
END

ALGORITHM orth_vector
VAR
    vectors : ARRAY_OF ARRAY;
    ps,i,j,n:INTEGER;
BEGIN
    n:=vectors.length-1;
    FOR i FROM 0 TO n-1 STEP 1  DO
        FOR j FROM i+1 TO n STEP 1  DO
            ps := dot_product(vectors[i],vectors[j])
            IF (ps = 0) THEN
                Write(vectors[i],"and",vectors[j],"are orthogonal")
            END_IF
        END_FOR
    END_FOR
END